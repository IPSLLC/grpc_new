Source: grpc
Priority: optional
Maintainer: Laszlo Boszormenyi (GCS) <gcs@debian.org>
Build-Depends: debhelper-compat (= 13), zlib1g-dev, libssl-dev, libgflags-dev, libgtest-dev, libgoogle-perftools-dev, c-ares-dev, libre2-dev
Standards-Version: 4.5.1
Section: libs
Homepage: https://www.grpc.io/
Rules-Requires-Root: no
Vcs-Git: https://salsa.debian.org/debian/grpc.git
Vcs-Browser: https://salsa.debian.org/debian/grpc

Package: libgrpc-dev
Section: libdevel
Architecture: any
Multi-Arch: same
Depends: libgrpc10 (= ${binary:Version}), ${misc:Depends}
Conflicts: libgpr1-dev, libgpr2-dev, libgpr3-dev
Description: high performance general RPC framework (development)
 A modern, open source remote procedure call (RPC) framework that can
 run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.
 .
 This package contains the headers and the static library for libgrpc10.

Package: libgrpc10
Architecture: any
Multi-Arch: same
Depends: ${shlibs:Depends}, ${misc:Depends}
Breaks: libgrpc9
Replaces: libgrpc9
Description: high performance general RPC framework
 A modern, open source remote procedure call (RPC) framework that can
 run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.
 .
 This package provides the gRPC C bindings.

Package: libgrpc++-dev
Section: libdevel
Architecture: any
Multi-Arch: same
Depends: libgrpc++1 (= ${binary:Version}), libgrpc-dev (=${binary:Version}), ${misc:Depends}
Description: high performance general RPC framework (development)
 A modern, open source remote procedure call (RPC) framework that can
 run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.
 .
 This package contains the headers and the static library for libgrpc++1.

Package: libgrpc++1
Architecture: any
Multi-Arch: same
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: high performance general RPC framework
 A modern, open source remote procedure call (RPC) framework that can
 run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.
 .
 This package provides the gRPC C++ bindings.

Package: protobuf-compiler-grpc
Architecture: any
Multi-Arch: foreign
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: high performance general RPC framework - protobuf plugin
 A modern, open source remote procedure call (RPC) framework that can
 run anywhere. It enables client and server applications to communicate
 transparently, and makes it easier to build connected systems.
 .
 This package provides the plugins needed for compiling gRPC service
 definitions with the protobuf compiler.

Package: libabsl-dev
Version: 20230802
Architecture: any
Multi-Arch: same
Section: libdevel
Depends:
 libabsl20230802 (= ${binary:Version}),
 ${misc:Depends},
Description: ${source:Synopsis} (development files)
 ${source:Extended-Description}
 .
 This package contains header files and other data necessary for developing with
 Abseil.

Package: libabsl20230802
Version: 20230802
Architecture: any
Multi-Arch: same
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: ${source:Synopsis}
 ${source:Extended-Description}
 .
 This package contains Abseil's shared libraries.

Package: libprotobuf34
Version: 3.24.3-0
Architecture: any
Multi-Arch: same
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Breaks: libprotobuf23
Description: protocol buffers C++ library
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the runtime library needed for C++ applications.

Package: libprotobuf-lite34
Version: 3.24.3-0
Architecture: any
Multi-Arch: same
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: protocol buffers C++ library (lite version)
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the runtime library needed for C++ applications whose
 message definitions have the "lite runtime" optimization setting.

Package: libprotobuf-dev
Version: 3.24.3-0
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${misc:Depends}, zlib1g-dev,
 libprotobuf34 (= ${binary:Version}), libprotobuf-lite34 (= ${binary:Version})
Breaks: protobuf-compiler (<< ${binary:Version}), protobuf-compiler (>> ${binary:Version})
Description: protocol buffers C++ library (development files) and proto files
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the development headers and static libraries needed for
 writing C++ applications. Includes well known proto type files.

Package: libprotoc34
Version: 3.24.3-0
Architecture: any
Multi-Arch: same
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: protocol buffers compiler library
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the runtime library needed for the protocol buffer
 compiler.

Package: libprotoc-dev
Version: 3.24.3-0
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${misc:Depends},
 libprotoc34 (= ${binary:Version}), libprotobuf-dev (= ${binary:Version})
Replaces: libprotobuf-dev (<< 2.1.0)
Breaks: libprotobuf-dev (<< 2.1.0)
Description: protocol buffers compiler library (development files)
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the development headers and static library needed for
 writing protobuf compilers.

Package: protobuf-compiler
Version: 3.24.3-0
Architecture: any
Multi-Arch: foreign
Depends: ${shlibs:Depends}, ${misc:Depends}, libprotoc32 (= ${binary:Version})
Recommends: libprotobuf-dev
Description: compiler for protocol buffer definition files
 Protocol buffers are a flexible, efficient, automated mechanism for
 serializing structured data - similar to XML, but smaller, faster, and
 simpler. You define how you want your data to be structured once, then you can
 use special generated source code to easily write and read your structured
 data to and from a variety of data streams and using a variety of languages.
 You can even update your data structure without breaking deployed programs
 that are compiled against the "old" format.
 .
 Google uses Protocol Buffers for almost all of its internal RPC protocols and
 file formats.
 .
 This package contains the protocol buffer compiler that is used for
 translating from .proto files (containing the definitions) to the language
 binding for the supported languages.

